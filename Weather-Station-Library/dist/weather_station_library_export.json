{"meta":{"file_version":"4.0.1","database_name":"acme","export_timestamp":"2023-02-23T16:22:17.523938+00:00","export_library_fqn":["weather_station_library"],"database_schema_version":"4.3.16"},"types":[{"fqn":["thinkiq_base_library","equipment"],"icon":null,"scripts":[],"document":null,"attributes":[],"description":"Base type of equipment types.","edit_status":1,"display_name":"Equipment","opcua_methods":[],"relative_name":"equipment","classification":"equipment","child_equipment":[],"sub_type_of_fqn":null,"updated_timestamp":"2022-07-27T02:03:10.147568+00:00","unlink_relative_name":false},{"fqn":["weather_station_library","weather_station"],"icon":null,"scripts":[{"run":true,"owner":null,"script":"<?php\r\n\r\nuse \\TiqUtilities\\Database\\PgSQL;\r\n\r\nuse \\TiqUtilities\\Model\\Node;\r\nuse TiqUtilities\\Model\\Equipment;\r\nuse TiqUtilities\\Model\\Attribute;\r\n\r\nrequire_once 'thinkiq_context.php';\r\n$context = new Context();\r\n$logger = $context->logger; // shorthand to keep this script clearer \r\n\r\n$db = new PgSQL(new \\TiqConfig());\r\n\r\n// retrieve the weather station and its attributes\r\n$host_id = $context->std_inputs->node_id;\r\n$station = new Equipment($host_id);\r\n$station->getAttributes();\r\n\r\n// check what weather api to use\r\n$weather_api = $station->attributes['weather_api']->current_value;\r\n\r\n// this script is only for atlas.microsoft.com\r\nif($weather_api == \"atlas.microsoft.com\"){\r\n\r\n// documentation for api endpoint is here: https://docs.microsoft.com/en-us/rest/api/maps/weather/get-current-conditions\r\n// retrieve latitude, longitude, and api_key\r\n// latlon comes from the parent's GeoLocation attribute\r\n\r\n$station->getParent();\r\n$station->parent->getAttributes();\r\n$station->parent->geo_location->getGeoCoordinates();\r\n\r\n$lat = $station->parent->geo_location->latitude;\r\n$lon = $station->parent->geo_location->longitude;\r\n$api_key = $station->attributes['api_key']->current_value;\r\n// echo print_r($latlon, true) . PHP_EOL;\r\n// echo $lat . PHP_EOL;\r\n// echo $lon . PHP_EOL;\r\n\r\n// call the weather api with our lat, lon, and api_key\r\n// we have our system setup to use imperial units\r\n$response = json_decode(file_get_contents(\"https://atlas.microsoft.com/weather/currentConditions/json?api-version=1.0&query=$lat,$lon&subscription-key=$api_key&unit=imperial\"), true);\r\n// echo print_r($response, true);\r\n\r\n// the response is an array, and for current, there's only one element inside\r\n$data = $response['results'][0];\r\n// echo print_r(new DateTime($data['dateTime']), true) . PHP_EOL;\r\n// echo print_r(json_encode($data), true) . PHP_EOL;\r\n\r\n// this is the parsed object we want to create\r\n\r\n// {\r\n//   \"air_pressure\": 1.23,\r\n//   \"dew_point\": 1.23,\r\n//   \"relative_humidity\": 1.23,\r\n//   \"temperature\": 1.23,\r\n//   \"wet_bulb\": 1.23,\r\n//   \"wind_direction\": 1.23,\r\n//   \"wind_speed\": 1.23\r\n// }\r\n\r\n$data_parsed['air_pressure']=$data['pressure']['value'];\r\n$data_parsed['dew_point']=$data['dewPoint']['value'];\r\n$data_parsed['relative_humidity']=$data['relativeHumidity'];\r\n$data_parsed['temperature']=$data['temperature']['value'];\r\n$data_parsed['wet_bulb']=$data['wetBulbTemperature']['value'];\r\n$data_parsed['wind_direction']=$data['wind']['direction']['degrees'];\r\n$data_parsed['wind_speed']=$data['wind']['speed']['value'];\r\n\r\n// echo print_r(json_encode($data_parsed), true) . PHP_EOL;\r\n\r\n// save the raw data\r\n$station->attributes['raw_data']->insertTimeSeries([json_encode($data)], [new DateTime($data['dateTime'])]);\r\n\r\n// save the parsed data\r\n$station->attributes['raw_data_parsed']->insertTimeSeries([json_encode($data_parsed)], [new DateTime($data['dateTime'])]);\r\n\r\n\r\n} else {\r\n    // element does not use this connector\r\n    // echo \"nothing to do here\" . PHP_EOL;\r\n}\r\n\r\n// the end\r\n$logger->info(\"Done running at \" . (new DateTime())->format(\"Y-m-d H:i:s\"));\r\n\r\n$context->return_data();","document":{"template":false},"description":"fetches weather from atlas.microsoft.com\napi documentation: https://docs.microsoft.com/en-us/rest/api/maps/weather/get-current-conditions","edit_status":1,"output_type":"headless","script_type":"php","display_name":"Weather Connector Atlas","relative_name":"weather_connector_atlas","initial_inputs":{"start_timestamp":"2021-10-05T12:53:00.000+00:00","interval_seconds":60},"cron_expression":"0 0/15 * * * ? *","exec_on_derived":false,"updated_timestamp":"2022-12-16T13:19:21.659073+00:00","max_acceptable_run_secs":0,"use_outputs_from_last_run":false},{"run":false,"owner":null,"script":"<?php\r\nuse \\TiqUtilities\\Database\\PgSQL;\r\n\r\nuse \\TiqUtilities\\Model\\Node;\r\nuse TiqUtilities\\Model\\Equipment;\r\nuse TiqUtilities\\Model\\Attribute;\r\n\r\nrequire_once 'thinkiq_context.php';\r\n$context = new Context();\r\n$logger = $context->logger; // shorthand to keep this script clearer \r\n\r\n$db = new PgSQL(new \\TiqConfig());\r\n\r\n// retrieve the weather station and its attributes\r\n$host_id = $context->std_inputs->node_id;\r\n$station = new Equipment($host_id);\r\n$station->getAttributes();\r\n\r\n// check what weather api to use\r\n$weather_api = $station->attributes['weather_api']->current_value;\r\n\r\n// this script is only for atlas.microsoft.com\r\nif($weather_api == \"openweathermap.org\"){\r\n\r\n// retrieve latitude, longitude, and api_key\r\n// latlon comes from an expression, so we need to use getTimeSeries for this\r\n$latlon = json_decode($station->attributes['geo_location']->getTimeSeries(new DateTime(), new DateTime())['values'][0], true);\r\necho PHP_EOL;\r\n\r\n$lat = floatval($latlon['latitude']);\r\n$lon = floatval($latlon['longitude']);\r\n$api_key = $station->attributes['api_key']->current_value;\r\n// echo print_r($latlon, true) . PHP_EOL;\r\n// echo $lat . PHP_EOL;\r\n// echo $lon . PHP_EOL;\r\n\r\n// documentation for api endpoint is here: https://openweathermap.org/current\r\n// call the weather api with our lat, lon, and api_key\r\n// we have our system setup to use imperial units\r\n$data = json_decode(file_get_contents(\"http://api.openweathermap.org/data/2.5/weather?lat=$lat&lon=$lon&appid=$api_key&units=imperial\"), true);\r\n$epoch = $data['dt'];\r\n\r\n$timestamp = new DateTime(\"@$epoch\");\r\n// echo print_r($timestamp, true) . PHP_EOL;\r\n// echo print_r(json_encode($data), true) . PHP_EOL;\r\n\r\n// this is the parsed object we want to create\r\n\r\n// {\r\n//   \"air_pressure\": 1.23,\r\n//   \"dew_point\": 1.23,\r\n//   \"relative_humidity\": 1.23,\r\n//   \"temperature\": 1.23,\r\n//   \"wet_bulb\": 1.23,\r\n//   \"wind_direction\": 1.23,\r\n//   \"wind_speed\": 1.23\r\n// }\r\n\r\n$data_parsed['air_pressure']=$data['main']['pressure'] / 33.864; // we need to convert mbar (same as hPa) to inch of mercury\r\n// $data_parsed['dew_point']=$data['dewPoint']['value'];\r\n$data_parsed['relative_humidity']=$data['main']['humidity'];\r\n$data_parsed['temperature']=$data['main']['temp'];\r\n// $data_parsed['wet_bulb']=$data['wetBulbTemperature']['value'];\r\n$data_parsed['wind_direction']=($data['wind']['deg'] + 180) % 360; // we need to add 180 deg to get where the wind is blowing towards\r\n$data_parsed['wind_speed']=$data['wind']['speed'];\r\n\r\n// calculate dew point according to https://en.wikipedia.org/wiki/Dew_point\r\n$b = 18.678;    //constant b\r\n$c = 257.14;    //constant c\r\n$t_c = ($data['main']['temp'] - 32) / 1.8; //dry bulb temp in deg C\r\n$rh = $data['main']['humidity'];\r\n\r\n// echo $t_c . PHP_EOL;\r\n// echo $rh . PHP_EOL;\r\n$gamma = log($rh / 100) +  $b * $t_c / ($c + $t_c);\r\n// echo $gamma . PHP_EOL;\r\n$dew_point = $c * $gamma / ($b - $gamma);\r\n// echo $dew_point . PHP_EOL;\r\n$data_parsed['dew_point']= $dew_point;\r\n\r\n\r\n// wet bulb is a mess. use this one: https://forum.arduino.cc/t/formula-for-outputting-wet-bulb-temp-from-temp-and-rh/231797/5\r\n$tw = 5.391260E-01 * $t_c + 1.047837E-01 * $rh -7.493556E-04 * $rh * $rh -1.077432E-03 * $t_c * $t_c + 6.414631E-03 * $t_c * $rh - 5.151526E+00;\r\n// echo $tw . PHP_EOL;\r\n$data_parsed['wet_bulb']= ($tw * 1.8 ) + 32; //dry bulb temp in deg F\r\n\r\n// echo print_r(json_encode($data_parsed), true) . PHP_EOL;\r\n\r\n// save the raw data\r\n$station->attributes['raw_data']->insertTimeSeries([json_encode($data)], [$timestamp]);\r\n\r\n// save the parsed data\r\n$station->attributes['raw_data_parsed']->insertTimeSeries([json_encode($data_parsed)], [$timestamp]);\r\n\r\n\r\n} else {\r\n    // element does not use this connector\r\n    // echo \"nothing to do here\" . PHP_EOL;\r\n}\r\n\r\n// the end\r\n$logger->info(\"Done running at \" . (new DateTime())->format(\"Y-m-d H:i:s\"));\r\n\r\n$context->return_data();","document":{"template":false},"description":"fetches weather from  openweathermap.org\napi documentation: https://openweathermap.org/current","edit_status":1,"output_type":"headless","script_type":"php","display_name":"Weather Connector OpenWeatherMap","relative_name":"weather_connector_openweathermap","initial_inputs":{"start_timestamp":"2021-10-06T18:15:55.000+00:00","interval_seconds":60},"cron_expression":"0 0/15 * * * ? *","exec_on_derived":false,"updated_timestamp":"2022-04-19T05:59:30.439477+00:00","max_acceptable_run_secs":0,"use_outputs_from_last_run":false}],"document":null,"attributes":[{"document":null,"data_type":"float","is_hidden":false,"max_value":100,"min_value":0,"expression":"for_each_in($.raw_data_parsed, (value::jsonb->>'relative_humidity')::double precision)","importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Relative Humidity","default_value":null,"relative_name":"relative_humidity","decimal_places":2,"source_category":"expression","attribute_limits":[],"updated_timestamp":"2021-10-06T19:56:09.811959+00:00","attribute_type_fqn":null,"enumeration_type_fqn":null,"interpolation_method":"linear","unlink_relative_name":false,"default_enumeration_values":null,"default_measurement_unit_fqn":["thinkiq_base_library","percent"]},{"document":null,"data_type":"float","is_hidden":false,"max_value":100,"min_value":0,"expression":"for_each_in($.raw_data_parsed, (value::jsonb->>'wind_speed')::double precision)","importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Wind Speed","default_value":null,"relative_name":"wind_speed","decimal_places":2,"source_category":"expression","attribute_limits":[],"updated_timestamp":"2021-10-06T19:56:09.811959+00:00","attribute_type_fqn":null,"enumeration_type_fqn":null,"interpolation_method":"linear","unlink_relative_name":false,"default_enumeration_values":null,"default_measurement_unit_fqn":["thinkiq_base_library","us_mile_per_hour"]},{"document":null,"data_type":"float","is_hidden":false,"max_value":130,"min_value":-20,"expression":"for_each_in($.raw_data_parsed, (value::jsonb->>'temperature')::double precision)","importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Temperature","default_value":null,"relative_name":"temperature","decimal_places":2,"source_category":"expression","attribute_limits":[],"updated_timestamp":"2021-10-06T19:56:09.811959+00:00","attribute_type_fqn":null,"enumeration_type_fqn":null,"interpolation_method":"linear","unlink_relative_name":false,"default_enumeration_values":null,"default_measurement_unit_fqn":["thinkiq_base_library","fahrenheit"]},{"document":null,"data_type":"float","is_hidden":false,"max_value":100,"min_value":30,"expression":"for_each_in($.raw_data_parsed, (value::jsonb->>'wet_bulb')::double precision)","importance":10,"description":"The wet-bulb temperature is the temperature read by a thermometer covered in water-soaked cloth over which air is passed. At 100% relative humidity, the wet-bulb temperature is equal to the air temperature; at lower humidity the wet-bulb temperature is lower than dry-bulb temperature because of evaporative cooling.","edit_status":1,"is_required":false,"display_name":"Wet Bulb","default_value":null,"relative_name":"wet_bulb","decimal_places":2,"source_category":"expression","attribute_limits":[],"updated_timestamp":"2021-10-06T19:56:09.811959+00:00","attribute_type_fqn":null,"enumeration_type_fqn":null,"interpolation_method":"linear","unlink_relative_name":false,"default_enumeration_values":null,"default_measurement_unit_fqn":["thinkiq_base_library","fahrenheit"]},{"document":null,"data_type":"float","is_hidden":false,"max_value":110,"min_value":30,"expression":"for_each_in($.raw_data_parsed, (value::jsonb->>'dew_point')::double precision)","importance":10,"description":"The dew point is the temperature to which air must be cooled to become saturated with water vapor. It is assumed that air pressure and water content is constant. When cooled further, the airborne water vapor will condense to form liquid water.","edit_status":1,"is_required":false,"display_name":"Dew Point","default_value":null,"relative_name":"dew_point","decimal_places":2,"source_category":"expression","attribute_limits":[],"updated_timestamp":"2021-10-06T19:56:09.811959+00:00","attribute_type_fqn":null,"enumeration_type_fqn":null,"interpolation_method":"linear","unlink_relative_name":false,"default_enumeration_values":null,"default_measurement_unit_fqn":["thinkiq_base_library","fahrenheit"]},{"document":null,"data_type":"float","is_hidden":false,"max_value":35,"min_value":25,"expression":"for_each_in($.raw_data_parsed, (value::jsonb->>'air_pressure')::double precision)","importance":10,"description":"Inch of mercury is a unit of measurement for pressure. It is used for barometric pressure in weather reports, refrigeration and aviation in the United States. It is the pressure exerted by a column of mercury 1 inch in height at the standard acceleration of gravity.","edit_status":1,"is_required":false,"display_name":"Air Pressure","default_value":null,"relative_name":"air_pressure","decimal_places":2,"source_category":"expression","attribute_limits":[],"updated_timestamp":"2021-10-06T19:56:09.811959+00:00","attribute_type_fqn":null,"enumeration_type_fqn":null,"interpolation_method":"linear","unlink_relative_name":false,"default_enumeration_values":null,"default_measurement_unit_fqn":["thinkiq_base_library","inch_of_mercury"]},{"document":null,"data_type":"float","is_hidden":false,"max_value":360,"min_value":0,"expression":"for_each_in($.raw_data_parsed, (value::jsonb->>'wind_direction')::double precision)","importance":10,"description":"Wind direction in Azimuth degrees, starting at true North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. This states towards which direction the wind is blowing (vs meteorological, i.e. from where the wind is blowing.)","edit_status":1,"is_required":false,"display_name":"Wind Direction","default_value":null,"relative_name":"wind_direction","decimal_places":2,"source_category":"expression","attribute_limits":[],"updated_timestamp":"2021-10-06T19:56:09.811959+00:00","attribute_type_fqn":null,"enumeration_type_fqn":null,"interpolation_method":"linear","unlink_relative_name":false,"default_enumeration_values":null,"default_measurement_unit_fqn":["weather_station_library","deg"]},{"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"API Key","default_value":null,"relative_name":"api_key","decimal_places":2,"source_category":"config","attribute_limits":[],"updated_timestamp":"2021-10-06T19:56:09.811959+00:00","attribute_type_fqn":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":"available connectors:\natlas.microsoft.com\nopenweathermap.org","edit_status":1,"is_required":false,"display_name":"Weather API","default_value":null,"relative_name":"weather_api","decimal_places":2,"source_category":"config","attribute_limits":[],"updated_timestamp":"2021-10-06T19:56:09.811959+00:00","attribute_type_fqn":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":"holds raw json received from the weather api endpoint.","edit_status":1,"is_required":false,"display_name":"Raw Data","default_value":null,"relative_name":"raw_data","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2021-10-06T19:56:09.811959+00:00","attribute_type_fqn":null,"enumeration_type_fqn":null,"interpolation_method":"none","unlink_relative_name":false,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":"holds json to match the attributes in the weather station:\n{\n  \"air_pressure\": 1.23,\n  \"dew_point\": 1.23,\n  \"relative_humidity\": 1.23,\n  \"temperature\": 1.23,\n  \"wet_bulb\": 1.23,\n  \"wind_direction\": 1.23,\n  \"wind_speed\": 1.23\n}","edit_status":1,"is_required":false,"display_name":"Raw Data Parsed","default_value":null,"relative_name":"raw_data_parsed","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2021-10-06T19:56:09.811959+00:00","attribute_type_fqn":null,"enumeration_type_fqn":null,"interpolation_method":"none","unlink_relative_name":false,"default_enumeration_values":null,"default_measurement_unit_fqn":null}],"description":"Virtual weather station that holds temp, humidity, dew point, ... information that is continuously gathered from web api's.","edit_status":1,"display_name":"Weather Station","opcua_methods":[],"relative_name":"weather_station","classification":"equipment","child_equipment":[],"sub_type_of_fqn":["thinkiq_base_library","equipment"],"updated_timestamp":"2022-07-27T02:03:10.147568+00:00","unlink_relative_name":false}],"objects":[],"libraries":[{"fqn":["local_library"],"locked":false,"models":null,"aliases":null,"version":"1.0.0","document":null,"licensing":null,"extensions":null,"description":"The library storing type system locally","edit_status":1,"server_uris":null,"display_name":"Local Library","relative_name":"local_library","namespace_uris":null,"updated_timestamp":"2022-07-27T02:03:10.147568+00:00","unlink_relative_name":false},{"fqn":["thinkiq_base_library"],"locked":true,"models":null,"aliases":null,"version":"1.7.0","document":null,"licensing":"The ThinkIQ Base Library is copyright protected.","extensions":null,"description":"ThinkIQ Base Library","edit_status":1,"server_uris":null,"display_name":"ThinkIQ Base Library","relative_name":"thinkiq_base_library","namespace_uris":null,"updated_timestamp":"2023-02-02T07:22:36.533037+00:00","unlink_relative_name":false},{"fqn":["weather_station_library"],"locked":false,"models":null,"aliases":null,"version":"1.0.0","document":null,"licensing":null,"extensions":null,"description":"Library with type for a weather station with attributes for temp, humidity, dew point, wet bulb, ... and logic to continuously pull data from several weather api's.","edit_status":1,"server_uris":null,"display_name":"Weather Station Library","relative_name":"weather_station_library","namespace_uris":null,"updated_timestamp":"2021-10-06T19:56:09.811959+00:00","unlink_relative_name":false}],"quantities":[{"fqn":["thinkiq_base_library","fraction_quantity"],"document":null,"description":"The ratio between two dimensionless numbers","edit_status":1,"display_name":"Fraction quantity","relative_name":"fraction_quantity","quantity_symbol":"Fraction","updated_timestamp":"2022-09-14T05:07:06.750484+00:00","unlink_relative_name":false},{"fqn":["thinkiq_base_library","pressure_quantity"],"document":null,"description":"Force per unit area","edit_status":1,"display_name":"Pressure quantity","relative_name":"pressure_quantity","quantity_symbol":"p","updated_timestamp":"2022-09-14T05:07:06.750484+00:00","unlink_relative_name":false},{"fqn":["thinkiq_base_library","temperature_quantity"],"document":null,"description":"The physical property of matter that quantitatively expresses the common notions of hot and cold","edit_status":1,"display_name":"Temperature quantity","relative_name":"temperature_quantity","quantity_symbol":"T","updated_timestamp":"2022-09-14T05:07:06.750484+00:00","unlink_relative_name":false},{"fqn":["thinkiq_base_library","velocity_quantity"],"document":null,"description":"Time rate of change of position, vector","edit_status":1,"display_name":"Velocity quantity","relative_name":"velocity_quantity","quantity_symbol":"v","updated_timestamp":"2022-09-14T05:07:06.750484+00:00","unlink_relative_name":false},{"fqn":["weather_station_library","angle"],"document":null,"description":"Units to measure angles.","edit_status":1,"display_name":"Angle","relative_name":"angle","quantity_symbol":"","updated_timestamp":"2021-10-06T19:56:09.811959+00:00","unlink_relative_name":false}],"relationships":[],"attribute_types":[{"fqn":["weather_station_library","geo_location"],"notes":"","document":null,"data_type":"string","max_value":null,"min_value":null,"description":"","edit_status":1,"display_name":"Geo Location","relative_name":"geo_location","decimal_places":2,"updated_timestamp":"2022-04-06T18:37:03.684595+00:00","interpolation_method":"none","unlink_relative_name":false,"default_measurement_unit_fqn":null}],"opcua_variables":[],"opcua_data_types":[],"script_templates":[{"fqn":["weather_station_library","format_weather_stations"],"run":false,"owner":null,"script":"<script src=\"media/com_thinkiq/js/dist/tiq.core.js\"></script>\r\n<script src=\"media/com_thinkiq/js/dist/tiq.components.js\"></script>\r\n<script src=\"media/com_thinkiq/js/dist/tiq.charts.js\"></script>\r\n\r\n<div id=\"app\">\r\n    <button class=\"btn btn-primary\" @click=\"getStations\">List Weather Stations and Attributes </button>\r\n    <button class=\"btn btn-primary\" @click=\"updateStations\">Update Weather Station Attributes </button>\r\n\r\n    <div v-for=\"aStation in stations\">\r\n        <div class=\"card mt-4\">\r\n            <div class=\"card-body\">\r\n                <h5 class=\"card-title\">{{aStation.displayName}}</h5> \r\n                <h6 class=\"card-subtitle mb-2 text-muted\">{{aStation.fqn.join(' / ')}}</h6>\r\n                <p class=\"card-text\">\r\n                    <table class=\"table\">\r\n                        <thead>\r\n                            <th>Attribute Name</th>\r\n                            <th>Importance</th>\r\n                            <th>IsHidden</th>\r\n                            <th>Most Recent Value</th>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr v-for=\"aAttribute in aStation.attributesSorted\" v-bind:class=\"aAttribute.isHidden ? {'text-muted': true} :  {'text-muted': false}\">\r\n                                <td>{{aAttribute.displayName}}</td>\r\n                                <td>{{aAttribute.importance}}</td>\r\n                                <td>{{aAttribute.isHidden}}</td>\r\n                                <td>{{aAttribute.prettyValue}}</td>\r\n                           </tr>\r\n                        <tbody>\r\n                    </table>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<script>\r\n\r\nvar app = new core.Vue({\r\n    el: \"#app\",\r\n    data() {\r\n        return {                    \r\n            stations: [],\r\n        }\r\n    },\r\n    mounted: function () {                \r\n        this.getStations();\r\n\r\n    },\r\n    methods: {        \r\n        makeRequestAsync : async function (query){\r\n            let settings = { method: 'POST', headers: {} };\r\n            let formData = new FormData();\r\n            formData.append('query', query);\r\n            settings.body = formData;\r\n            let fetchQueryResponse = await fetch(`/api/graphql/`, settings);\r\n            return await fetchQueryResponse.json();\r\n        },\r\n           \r\n        getStations: async function () {\r\n            let this_vue = this;\r\n            let query = `\r\n                query q1 {\r\n                    equipments(condition: { typeName: \"weather_station\" }) {\r\n                        id\r\n                        displayName\r\n                        relativeName\r\n                        fqn\r\n                        attributes {\r\n                            id\r\n                            displayName\r\n                            relativeName\r\n                            isHidden\r\n                            importance\r\n                            getTimeSeries(startTime: \"${(new core.moment()).add(-2, 'h').format()}\", endTime: \"${((new core.moment()).add(1, 'h').format())}\"){\r\n                                ts\r\n                                floatvalue\r\n                                stringvalue\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            `;\r\n            let aResponse = await this_vue.makeRequestAsync(query);\r\n            aResponse.data.equipments.forEach(aStation =>{\r\n                aStation.attributes.forEach(aAttribute =>{\r\n                    if(aAttribute.getTimeSeries.length > 0){\r\n                        if(aAttribute.getTimeSeries[aAttribute.getTimeSeries.length-1].floatvalue==null){\r\n                            aAttribute.prettyValue = aAttribute.getTimeSeries[aAttribute.getTimeSeries.length-1].stringvalue;\r\n                         } else {\r\n                             aAttribute.prettyValue = aAttribute.getTimeSeries[aAttribute.getTimeSeries.length-1].floatvalue;\r\n                         }\r\n                    } else {\r\n                        aAttribute.prettyValue = \"\";\r\n                    }\r\n                });\r\n                aStation.attributesSorted=aStation.attributes.sort((a,b)=>a.importance>b.importance ? 1 : -1);\r\n            });\r\n            this_vue.stations = aResponse.data.equipments;\r\n\r\n        },\r\n        updateStations: async function () {\r\n            let this_vue = this;\r\n\r\n            let template = {\r\n                temperature:1,\r\n                relative_humidity:2,\r\n                air_pressure:3,\r\n                wind_speed:4,\r\n                wind_direction:5,\r\n                dew_point:6,\r\n                wet_bulb:7\r\n            };\r\n\r\n            for(let i=0; i<this_vue.stations.length; i++){\r\n                let aStation = this_vue.stations[i];\r\n                for(let j=0; j<aStation.attributes.length; j++){\r\n                    let aAttribute = aStation.attributes[j];\r\n                    let aKey = Object.keys(template).filter(x=>x==aAttribute.relativeName);\r\n                    if(aKey.length==0){\r\n                        // set the importance to 10 and hide\r\n                        let query = `\r\n                            mutation q2 {\r\n                            updateAttribute(\r\n                                input: { id: \"${aAttribute.id}\", patch: { isHidden: true, importance: 10 } }\r\n                            ) {\r\n                                attribute {\r\n                                id\r\n                                displayName\r\n                                isHidden\r\n                                importance\r\n                                \r\n                                }\r\n                            }\r\n                            }\r\n                        `;\r\n                        let aResponse = await this_vue.makeRequestAsync(query);\r\n                    } else {\r\n                        // set the importance and don't hide\r\n                                                let query = `\r\n                            mutation q2 {\r\n                            updateAttribute(\r\n                                input: { id: \"${aAttribute.id}\", patch: { isHidden: false, importance: ${template[aKey[0]]} } }\r\n                            ) {\r\n                                attribute {\r\n                                id\r\n                                displayName\r\n                                isHidden\r\n                                importance\r\n                                \r\n                                }\r\n                            }\r\n                            }\r\n                        `;\r\n                        let aResponse = await this_vue.makeRequestAsync(query);\r\n\r\n                    }\r\n                }\r\n            }\r\n            this_vue.getStations();\r\n        }\r\n\r\n    }\r\n});\r\n\r\n</script>","document":{"template":false},"description":"This script hides raw data and settings attributes and applies order attributes to weather data attributes.","edit_status":1,"output_type":"browser","script_type":"php","display_name":"Format Weather Stations","relative_name":"format_weather_stations","initial_inputs":{"start_timestamp":"2021-10-06T14:09:31.000+00:00","interval_seconds":60},"cron_expression":null,"exec_on_derived":false,"updated_timestamp":"2022-04-19T05:59:30.439477+00:00","max_acceptable_run_secs":0,"use_outputs_from_last_run":false}],"enumeration_types":[],"measurement_units":[{"fqn":["thinkiq_base_library","fahrenheit"],"symbol":"°F","document":null,"is_hidden":false,"unece_code":"FAH","unece_name":"degree Fahrenheit","description":"A scale and unit of measurement for temperature, in which water freezes at 32 degrees and boils at 212 degrees.","edit_status":1,"display_name":"°Fahrenheit","quantity_fqn":["thinkiq_base_library","temperature_quantity"],"opcua_unit_id":4604232,"relative_name":"fahrenheit","conversion_offset":459.67,"updated_timestamp":"2022-09-14T05:07:06.750484+00:00","unlink_relative_name":false,"conversion_multiplier":0.55555556},{"fqn":["thinkiq_base_library","inch_of_mercury"],"symbol":"inHg","document":null,"is_hidden":false,"unece_code":"F79","unece_name":"inch of mercury","description":"Inch of mercury is a unit of measurement for pressure. It is used for barometric pressure in weather reports, refrigeration and aviation in the United States. It is the pressure exerted by a column of mercury 1 inch in height at the standard acceleration of gravity.","edit_status":1,"display_name":"inch of mercury","quantity_fqn":["thinkiq_base_library","pressure_quantity"],"opcua_unit_id":4601657,"relative_name":"inch_of_mercury","conversion_offset":0,"updated_timestamp":"2022-09-14T05:07:06.750484+00:00","unlink_relative_name":false,"conversion_multiplier":3386.39},{"fqn":["thinkiq_base_library","percent"],"symbol":"%","document":null,"is_hidden":false,"unece_code":"P1","unece_name":"percent","description":null,"edit_status":1,"display_name":"percent","quantity_fqn":["thinkiq_base_library","fraction_quantity"],"opcua_unit_id":20529,"relative_name":"percent","conversion_offset":0,"updated_timestamp":"2022-09-14T05:07:06.750484+00:00","unlink_relative_name":false,"conversion_multiplier":1},{"fqn":["thinkiq_base_library","us_mile_per_hour"],"symbol":"mph","document":null,"is_hidden":false,"unece_code":"HM","unece_name":"mile per hour (statute mile)","description":null,"edit_status":1,"display_name":"mile per hour","quantity_fqn":["thinkiq_base_library","velocity_quantity"],"opcua_unit_id":18509,"relative_name":"us_mile_per_hour","conversion_offset":0,"updated_timestamp":"2022-09-14T05:07:06.750484+00:00","unlink_relative_name":false,"conversion_multiplier":0.447040833333333},{"fqn":["weather_station_library","deg"],"symbol":"deg","document":null,"is_hidden":false,"unece_code":null,"unece_name":null,"description":"angle in degrees [0..360]","edit_status":1,"display_name":"deg","quantity_fqn":["weather_station_library","angle"],"opcua_unit_id":null,"relative_name":"deg","conversion_offset":0,"updated_timestamp":"2021-10-06T19:56:09.811959+00:00","unlink_relative_name":false,"conversion_multiplier":1}],"relationship_types":[],"opcua_variable_types":[],"opcua_reference_types":[],"md5_checksum":"477259bbe8c5bf5529d72e6964023483"}